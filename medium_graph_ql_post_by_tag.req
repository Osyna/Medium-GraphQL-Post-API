query TopicFeedQuery(   $paging: PagingOptions   $tagSlug: String   $mode: TagFeedMode ) {   tagFeed(paging: $paging, tagSlug: $tagSlug, mode: $mode) {     items {       ... on TagFeedItem {         post {           ...PostPreview_post           __typename         }         __typename       }       __typename     }     pagingInfo {       next {         limit         to         __typename       }       __typename     }     __typename   } } fragment PostPreview_post on Post {   id   title   creator {     ...PostPreview_user   }   ...InteractivePostBody_postPreview   firstPublishedAt   latestPublishedAt   previewImage {     id     __typename   }   readingTime   visibility   ...CardByline_post   ...ReadMore_post   ...HighDensityPreview_post   __typename } fragment PostPreview_user on User {   name   username }    fragment ZenPostByline_collection on Collection {   __typename   id   name   ...collectionUrl_collection } fragment collectionUrl_collection on Collection {   id   domain   slug   __typename } fragment InteractivePostBody_postPreview on Post {   extendedPreviewContent(     truncationConfig: {       previewParagraphsWordCountThreshold: 4000       minimumWordLengthForTruncation: 1500       truncateAtEndOfSentence: false       showFullImageCaptions: true       shortformPreviewParagraphsWordCountThreshold: 3000       shortformMinimumWordLengthForTruncation: 3000     }   ) {     bodyModel {       ...PostBody_bodyModel       __typename     }     isFullContent     __typename   }   __typename   id } fragment PostBody_bodyModel on RichText {   sections {     name     startIndex     textLayout     imageLayout     backgroundImage {       id       originalHeight       originalWidth       __typename     }     videoLayout     backgroundVideo {       videoId       originalHeight       originalWidth       previewImageId       __typename     }     __typename   }   paragraphs {     id     ...PostBodySection_paragraph     __typename   }   ...normalizedBodyModel_richText   __typename } fragment PostBodySection_paragraph on Paragraph {   name   ...PostBodyParagraph_paragraph   __typename   id } fragment PostBodyParagraph_paragraph on Paragraph {   name   type   ...ImageParagraph_paragraph   ...TextParagraph_paragraph   ...IframeParagraph_paragraph   ...MixtapeParagraph_paragraph   ...CodeBlockParagraph_paragraph   __typename   id } fragment ImageParagraph_paragraph on Paragraph {   href   layout   metadata {     id     originalHeight     originalWidth     focusPercentX     focusPercentY     alt     __typename   }   ...Markups_paragraph   ...ParagraphRefsMapContext_paragraph   ...PostAnnotationsMarker_paragraph   __typename   id } fragment Markups_paragraph on Paragraph {   name   text   hasDropCap   dropCapImage {     ...MarkupNode_data_dropCapImage     __typename     id   }   markups {     type     start     end     href     anchorType     userId     linkMetadata {       httpStatus       __typename     }     __typename   }   __typename   id } fragment MarkupNode_data_dropCapImage on ImageMetadata {   ...DropCap_image   __typename   id } fragment DropCap_image on ImageMetadata {   id   originalHeight   originalWidth   __typename } fragment ParagraphRefsMapContext_paragraph on Paragraph {   id   name   text   __typename } fragment PostAnnotationsMarker_paragraph on Paragraph {   ...PostViewNoteCard_paragraph   __typename   id } fragment PostViewNoteCard_paragraph on Paragraph {   name   __typename   id } fragment TextParagraph_paragraph on Paragraph {   type   hasDropCap   codeBlockMetadata {     mode     lang     __typename   }   ...Markups_paragraph   ...ParagraphRefsMapContext_paragraph   __typename   id } fragment IframeParagraph_paragraph on Paragraph {   type   iframe {     mediaResource {       id       iframeSrc       iframeHeight       iframeWidth       title       __typename     }     __typename   }   layout   ...Markups_paragraph   __typename   id } fragment MixtapeParagraph_paragraph on Paragraph {   type   mixtapeMetadata {     href     mediaResource {       mediumCatalog {         id         __typename       }       __typename     }     __typename   }   ...GenericMixtapeParagraph_paragraph   __typename   id } fragment GenericMixtapeParagraph_paragraph on Paragraph {   text   mixtapeMetadata {     href     thumbnailImageId     __typename   }   markups {     start     end     type     href     __typename   }   __typename   id } fragment CodeBlockParagraph_paragraph on Paragraph {   codeBlockMetadata {     lang     mode     __typename   }   __typename   id } fragment normalizedBodyModel_richText on RichText {   paragraphs {     ...normalizedBodyModel_richText_paragraphs     __typename   }   sections {     startIndex     ...getSectionEndIndex_section     __typename   }   ...getParagraphStyles_richText   ...getParagraphSpaces_richText   __typename } fragment normalizedBodyModel_richText_paragraphs on Paragraph {   markups {     ...normalizedBodyModel_richText_paragraphs_markups     __typename   }   codeBlockMetadata {     lang     mode     __typename   }   ...getParagraphHighlights_paragraph   ...getParagraphPrivateNotes_paragraph   __typename   id } fragment normalizedBodyModel_richText_paragraphs_markups on Markup {   type   __typename } fragment getParagraphHighlights_paragraph on Paragraph {   name   __typename   id } fragment getParagraphPrivateNotes_paragraph on Paragraph {   name   __typename   id } fragment getSectionEndIndex_section on Section {   startIndex   __typename } fragment getParagraphStyles_richText on RichText {   paragraphs {     text     type     __typename   }   sections {     ...getSectionEndIndex_section     __typename   }   __typename } fragment getParagraphSpaces_richText on RichText {   paragraphs {     layout     metadata {       originalHeight       originalWidth       id       __typename     }     type     ...paragraphExtendsImageGrid_paragraph     __typename   }   ...getSeriesParagraphTopSpacings_richText   ...getPostParagraphTopSpacings_richText   __typename } fragment paragraphExtendsImageGrid_paragraph on Paragraph {   layout   type   __typename   id } fragment getSeriesParagraphTopSpacings_richText on RichText {   paragraphs {     id     __typename   }   sections {     ...getSectionEndIndex_section     __typename   }   __typename } fragment getPostParagraphTopSpacings_richText on RichText {   paragraphs {     layout     text     codeBlockMetadata {       lang       mode       __typename     }     __typename   }   sections {     ...getSectionEndIndex_section     __typename   }   __typename } fragment CardByline_post on Post {   ...DraftStatus_post   ...Star_post   ...shouldShowPublishedInStatus_post   ...ZenPostByline_post   __typename   id } fragment DraftStatus_post on Post {   id   pendingCollection {     id     creator {       id       __typename     }     ...BoldCollectionName_collection     __typename   }   statusForCollection   creator {     id     __typename   }   isPublished   __typename } fragment BoldCollectionName_collection on Collection {   id   name   __typename } fragment Star_post on Post {   id   creator {     id     __typename   }   __typename } fragment shouldShowPublishedInStatus_post on Post {   statusForCollection   isPublished   __typename   id } fragment ZenPostByline_post on Post {   collection {     ...ZenPostByline_collection     __typename     id   }   ...DraftStatus_post   ...shouldShowPublishedInStatus_post   __typename   id } fragment BookmarkButton_post on Post {   visibility   ...SusiClickable_post   ...AddToCatalogBookmarkButton_post   __typename   id } fragment SusiClickable_post on Post {   id   mediumUrl   ...SusiContainer_post   __typename } fragment SusiContainer_post on Post {   id   __typename } fragment AddToCatalogBookmarkButton_post on Post {   ...AddToCatalogBase_post   __typename   id } fragment AddToCatalogBase_post on Post {   id   __typename } fragment MultiVoteCount_post on Post {   id   ...PostVotersNetwork_post   __typename } fragment PostVotersNetwork_post on Post {   id   voterCount   recommenders {     name     __typename   }   __typename } fragment usePostUrl_post on Post {   id   creator {     __typename     id   }   collection {     id     domain     slug     __typename   }   isSeries   mediumUrl   sequence {     slug     __typename   }   uniqueSlug   __typename } fragment OverflowMenuButtonWithNegativeSignal_post on Post {   id   ...OverflowMenuWithNegativeSignal_post   ...CreatorActionOverflowPopover_post   __typename } fragment OverflowMenuWithNegativeSignal_post on Post {   id   creator {     id     __typename   }   collection {     id     __typename   }   ...OverflowMenuItemUndoClaps_post   __typename } fragment OverflowMenuItemUndoClaps_post on Post {   id   clapCount   ...ClapMutation_post   __typename } fragment ClapMutation_post on Post {   __typename   id   clapCount   ...MultiVoteCount_post } fragment CreatorActionOverflowPopover_post on Post {   allowResponses   id   statusForCollection   isLocked   isPublished   clapCount   mediumUrl   pinnedAt   pinnedByCreatorAt   curationEligibleAt   mediumUrl   responseDistribution   visibility   inResponseToPostResult {     __typename   }   inResponseToCatalogResult {     __typename   }   pendingCollection {     id     name     creator {       id       __typename     }     avatar {       id       __typename     }     domain     slug     __typename   }   creator {     id     ...MutePopoverOptions_creator     ...auroraHooks_publisher     __typename   }   collection {     id     name     creator {       id       __typename     }     avatar {       id       __typename     }     domain     slug     ...MutePopoverOptions_collection     ...auroraHooks_publisher     __typename   }   ...useIsPinnedInContext_post   ...NewsletterV3EmailToSubscribersMenuItem_post   ...OverflowMenuItemUndoClaps_post   __typename } fragment MutePopoverOptions_creator on User {   id   __typename } fragment auroraHooks_publisher on Publisher {   __typename   ... on Collection {     isAuroraEligible     isAuroraVisible     viewerEdge {       id       isEditor       __typename     }     __typename     id   }   ... on User {     isAuroraVisible     __typename     id   } } fragment MutePopoverOptions_collection on Collection {   id   __typename } fragment useIsPinnedInContext_post on Post {   id   collection {     id     __typename   }   pendingCollection {     id     __typename   }   pinnedAt   pinnedByCreatorAt   __typename } fragment NewsletterV3EmailToSubscribersMenuItem_post on Post {   id   creator {     id     newsletterV3 {       id       subscribersCount       __typename     }     __typename   }   isNewsletter   isAuthorNewsletter   __typename } fragment ReadMore_post on Post {   mediumUrl   readingTime   ...usePostUrl_post   __typename   id } fragment HighDensityPreview_post on Post {   id   title   previewImage {     id     focusPercentX     focusPercentY     __typename   }   extendedPreviewContent(     truncationConfig: {       previewParagraphsWordCountThreshold: 4000       minimumWordLengthForTruncation: 1500       truncateAtEndOfSentence: false       showFullImageCaptions: true       shortformPreviewParagraphsWordCountThreshold: 3000       shortformMinimumWordLengthForTruncation: 3000     }   ) {     subtitle     __typename   }   ...HighDensityFooter_post   __typename } fragment HighDensityFooter_post on Post {   id   readingTime   tags {     ...TopicPill_tag     __typename   }   ...BookmarkButton_post   ...ExpandablePostCardOverflowButton_post   ...OverflowMenuButtonWithNegativeSignal_post   __typename } fragment TopicPill_tag on Tag {   __typename   id   displayTitle   normalizedTagSlug } fragment ExpandablePostCardOverflowButton_post on Post {   creator {     id     __typename   }   ...ExpandablePostCardEditorWriterButton_post   ...ExpandablePostCardReaderButton_post   __typename   id } fragment ExpandablePostCardEditorWriterButton_post on Post {   id   collection {     id     name     slug     __typename   }   allowResponses   clapCount   visibility   mediumUrl   responseDistribution   ...useIsPinnedInContext_post   ...CopyFriendLinkMenuItem_post   ...NewsletterV3EmailToSubscribersMenuItem_post   ...OverflowMenuItemUndoClaps_post   __typename } fragment CopyFriendLinkMenuItem_post on Post {   id   __typename } fragment ExpandablePostCardReaderButton_post on Post {   id   collection {     id     __typename   }   creator {     id     __typename   }   clapCount   ...ClapMutation_post   __typename } 